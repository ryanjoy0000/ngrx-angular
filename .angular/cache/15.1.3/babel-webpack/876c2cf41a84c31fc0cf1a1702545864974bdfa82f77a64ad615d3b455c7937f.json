{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport * as PostActions from \"./actions\";\n// set initial state\nexport const initialState = {\n  isLoading: false,\n  posts: [],\n  error: null\n};\n// create a reducer of actions\nexport const reducers = createReducer(initialState, on(PostActions.getPosts, state => ({\n  ...state,\n  isLoading: true\n})), on(PostActions.getPostsSuccess, (state, action) => ({\n  ...state,\n  isLoading: false,\n  posts: action.posts\n})), on(PostActions.getPostsFailure, (state, action) => ({\n  ...state,\n  isLoading: false,\n  error: action.error\n})));","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAE/C,OAAO,KAAKC,WAAW,MAAM,WAAW;AAExC;AACA,OAAO,MAAMC,YAAY,GAA6C;EAClEC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE;CACV;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGP,aAAa,CACjCG,YAAY,EACZF,EAAE,CACEC,WAAW,CAACM,QAAQ,EACnBC,KAAK,KAAM;EAAC,GAAGA,KAAK;EAAEL,SAAS,EAAE;AAAI,CAAC,CAAC,CAC3C,EACDH,EAAE,CACEC,WAAW,CAACQ,eAAe,EAC3B,CAACD,KAAK,EAAEE,MAAM,MAAM;EAAC,GAAGF,KAAK;EAAEL,SAAS,EAAE,KAAK;EAAEC,KAAK,EAAEM,MAAM,CAACN;AAAK,CAAC,CAAC,CACzE,EACDJ,EAAE,CACEC,WAAW,CAACU,eAAe,EAC3B,CAACH,KAAK,EAAEE,MAAM,MAAM;EAAC,GAAGF,KAAK;EAAEL,SAAS,EAAE,KAAK;EAAEE,KAAK,EAAEK,MAAM,CAACL;AAAK,CAAC,CAAC,CACzE,CAGA","names":["createReducer","on","PostActions","initialState","isLoading","posts","error","reducers","getPosts","state","getPostsSuccess","action","getPostsFailure"],"sourceRoot":"","sources":["/Users/ryan/Workspace/codebase/angular/test1/src/app/posts/store/reducers.ts"],"sourcesContent":["import { createReducer, on } from \"@ngrx/store\";\nimport { PostsStateInterface } from \"../types/postsState.interface\";\nimport * as PostActions from \"./actions\";\n\n// set initial state\nexport const initialState: PostsStateInterface = <PostsStateInterface>{\n    isLoading: false,\n    posts: [],\n    error: null\n};\n\n// create a reducer of actions\nexport const reducers = createReducer(\n    initialState,\n    on(\n        PostActions.getPosts,\n        (state) => ({...state, isLoading: true})\n    ),\n    on(\n        PostActions.getPostsSuccess,\n        (state, action) => ({...state, isLoading: false, posts: action.posts})\n    ),\n    on(\n        PostActions.getPostsFailure,\n        (state, action) => ({...state, isLoading: false, error: action.error})\n    ),\n    \n    \n    );"]},"metadata":{},"sourceType":"module","externalDependencies":[]}